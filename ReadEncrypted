using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Security.Cryptography;
using System.IO;

namespace ReadEncrypted
{
    class Program
    {
        static void Main(string[] args)
        {
            //get our private key from encrypted file
            string localPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData) + @"\ReadEncrypted";
            Directory.CreateDirectory(localPath);

            string privateKeyPath = localPath + @"\private.txt";


            //password is used to encrpyt private key with AES
            Console.Write("Please enter password: ");
            string password = ReadPassword();

            //preberemo private key file
            string rawPrivateKey = File.ReadAllText(privateKeyPath);

            //decrypt private key using user password
            string privateKey = DecryptStringAes(rawPrivateKey, ConvertKey(password));

            string completeMail = File.ReadAllText("message.txt");


            //read message to parts
            string message = "";
            bool encrypted = false;
            string signature = "";
            string publicKeyInBse64 = "";

            int status = 0;
            using (StringReader sr = new StringReader(completeMail))
            {
                string line;
                while ((line = sr.ReadLine()) != null)
                {
                    if (line == "---END_MESSAGE---" || line == "---END_ENCRYPTED---" || line == "---END_SIGNATURE---" || line == "---END_PUBLIC_KEY---" || line == "")
                    {
                        continue;
                    }
                    if (line == "---MESSAGE---")
                    {
                        status = 1;
                    }
                    else if (line == "---ENCRYPTED---")
                    {
                        status = 2;
                    }
                    else if (line == "---SIGNATURE---")
                    {
                        status = 3;
                    }
                    else if (line == "---PUBLIC_KEY---")
                    {
                        status = 4;
                    }
                    else if (line == "---END_PUBLIC_KEY---")
                    {
                        break;
                    }
                    else
                    {
                        if (status == 1)
                        {
                            message = line;
                        }
                        else if (status == 2)
                        {
                            message = line;
                            encrypted = true;
                        }
                        else if (status == 3)
                        {
                            signature = line;
                        }
                        else if (status == 4)
                        {
                            publicKeyInBse64 = line;
                        }
                    }


                }

            }

            if (encrypted)
            {
                message = Base64Decode(message);
                message = decodeRSA(privateKey, message);
            }


            Console.WriteLine(message);
            Console.WriteLine(checkSignature(message, signature, publicKeyInBse64));
            Console.ReadLine();

        }

        //require plain text message, base64 signature and base64 publicKey
        private static bool checkSignature(string message, string signatureInBase64, string publicKeyInBase64)
        {
            var stringReader = new System.IO.StringReader(Base64Decode(publicKeyInBase64));
            var xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(RSAParameters));
            var pubicKey = (RSAParameters)xmlSerializer.Deserialize(stringReader);

            var serviceProvider = new RSACryptoServiceProvider();
            serviceProvider.ImportParameters(pubicKey);

            //get signature
            RSAPKCS1SignatureDeformatter RSADeformatter = new RSAPKCS1SignatureDeformatter(serviceProvider);
            RSADeformatter.SetHashAlgorithm("SHA256");
            SHA256Managed SHhash = new SHA256Managed();

            //checking
            if (RSADeformatter.VerifySignature(SHhash.ComputeHash(new UnicodeEncoding().GetBytes(message)), System.Convert.FromBase64String(Base64Decode(signatureInBase64))))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public static string Base64Decode(string base64EncodedData)
        {
            var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
            return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
        }

        public static string Base64Encode(string plainText)
        {
            var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
            return System.Convert.ToBase64String(plainTextBytes);
        }

        //read password from cmd (get * instead of real chars)
        public static string ReadPassword()
        {
            string password = "";
            ConsoleKeyInfo info = Console.ReadKey(true);
            while (info.Key != ConsoleKey.Enter)
            {
                if (info.Key != ConsoleKey.Backspace)
                {
                    Console.Write("*");
                    password += info.KeyChar;
                }
                else if (info.Key == ConsoleKey.Backspace)
                {
                    if (!string.IsNullOrEmpty(password))
                    {
                        // remove one character from the list of password characters
                        password = password.Substring(0, password.Length - 1);
                        // get the location of the cursor
                        int pos = Console.CursorLeft;
                        // move the cursor to the left by one character
                        Console.SetCursorPosition(pos - 1, Console.CursorTop);
                        // replace it with space
                        Console.Write(" ");
                        // move the cursor to the left by one character again
                        Console.SetCursorPosition(pos - 1, Console.CursorTop);
                    }
                }
                info = Console.ReadKey(true);
            }
            // add a new line because user pressed enter at the end of their password
            Console.WriteLine();
            return password;
        }

        private static byte[] ConvertKey(string password, int keyBytes = 32)
        {
            const int Iterations = 300;
            byte[] Salt = new byte[] { 10, 20, 30, 40, 50, 60, 70, 80 };
            var keyGenerator = new Rfc2898DeriveBytes(password, Salt, Iterations);
            return keyGenerator.GetBytes(keyBytes);
        }

        static string DecryptStringAes(string cipherTextString, byte[] Key)
        {
            string IV_String = cipherTextString.Substring(0, 24);
            string cipher_String = cipherTextString.Substring(24);
            byte[] cipherText = Convert.FromBase64String(cipher_String);
            byte[] IV = Convert.FromBase64String(IV_String);

            // Check arguments. 
            if (cipherText == null || cipherText.Length <= 0)
                throw new ArgumentNullException("cipherText");
            if (Key == null || Key.Length <= 0)
                throw new ArgumentNullException("Key");
            if (IV == null || IV.Length <= 0)
                throw new ArgumentNullException("Key");

            //razbijemo cipherText


            // Declare the string used to hold 
            // the decrypted text. 
            string plaintext = null;

            // Create an AesManaged object 
            // with the specified key and IV. 
            using (AesManaged aesAlg = new AesManaged())
            {
                aesAlg.Key = Key;
                aesAlg.IV = IV;

                // Create a decrytor to perform the stream transform.
                ICryptoTransform decryptor = aesAlg.CreateDecryptor(aesAlg.Key, aesAlg.IV);

                // Create the streams used for decryption. 
                using (MemoryStream msDecrypt = new MemoryStream(cipherText))
                {
                    using (CryptoStream csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read))
                    {
                        using (StreamReader srDecrypt = new StreamReader(csDecrypt))
                        {

                            // Read the decrypted bytes from the decrypting stream 
                            // and place them in a string.
                            plaintext = srDecrypt.ReadToEnd();
                        }
                    }
                }

            }

            return plaintext;

        }
        
        private static string decodeRSA(string privateKeyString, string cypherText)
        {
            //get object from string
            var stringReader = new System.IO.StringReader(privateKeyString);
            var xmlSerializer = new System.Xml.Serialization.XmlSerializer(typeof(RSAParameters));
            var privateKey = (RSAParameters)xmlSerializer.Deserialize(stringReader);

            var ServiceProvider = new RSACryptoServiceProvider();
            ServiceProvider.ImportParameters(privateKey);


            //get bytes
            var bytesText = Convert.FromBase64String(cypherText);
            var bytesPlain = ServiceProvider.Decrypt(bytesText, false);

            //get string to output file
            var decrypted = System.Text.Encoding.Unicode.GetString(bytesPlain);
            return decrypted;
        }
    }
}
